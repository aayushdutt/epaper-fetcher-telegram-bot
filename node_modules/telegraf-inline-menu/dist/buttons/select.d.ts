import { ContextFunc, ContextKeyFunc, ContextKeyIndexArrFunc } from '../generic-types';
import { PrefixOptions } from '../prefix';
import { KeyboardPart } from './types';
declare type OptionsFunc = ContextFunc<(string | number)[] | {
    [key: string]: string;
}>;
interface SelectButtonOptions {
    columns?: number;
    maxRows?: number;
    currentPage?: number;
    textFunc: ContextKeyIndexArrFunc<string>;
    hide?: ContextKeyFunc<boolean>;
}
export declare function generateSelectButtons(actionBase: string, options: readonly (string | number)[], selectOptions: SelectButtonOptions): KeyboardPart;
export interface SelectButtonCreatorOptions extends PrefixOptions {
    getCurrentPage?: ContextFunc<number>;
    textFunc?: ContextKeyIndexArrFunc<string>;
    prefixFunc?: ContextKeyIndexArrFunc<string>;
    isSetFunc?: ContextKeyFunc<boolean>;
    multiselect?: boolean;
    hide?: ContextKeyFunc<boolean>;
}
export declare function selectButtonCreator(action: string, optionsFunc: OptionsFunc, additionalArgs: SelectButtonCreatorOptions): (ctx: any) => Promise<KeyboardPart>;
export declare function selectHideFunc(keyFromCtx: (ctx: any) => string, optionsFunc: OptionsFunc, userHideFunc?: ContextKeyFunc<boolean>): ((ctx: any) => Promise<boolean>);
export {};
